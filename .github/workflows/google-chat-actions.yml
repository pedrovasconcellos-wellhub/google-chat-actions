name: Google Chat Actions

on:
  workflow_call:
    inputs:
      header_image:
        description: "Custom header image URL (optional)"
        default: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
        required: false
        type: string
      reply_option:
        description: "new_thread or same_thread (optional, default same_thread)"
        default: 'same_thread'
        required: false
        type: string
    secrets:
      notify_pr_webhook:
        description: "Google Chat webhook URL to notify Pull Requests events"
        required: true

jobs:
  notify-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Prepare message
        id: prepare_message
        run: |
          if [ "${{ inputs.reply_option }}" == "new_thread" ]; then
            REPLY_OPTION="MESSAGE_REPLY_OPTION_UNSPECIFIED"
          else
            REPLY_OPTION="REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD"
          fi

          case "${{ github.event.action }}" in
            opened)
              if [ "${{ github.event.pull_request.draft }}" == "true" ]; then
                echo "Notification skipped because the trigger is a draft PR creation"
                exit 0
              else
                HEADER_IMAGE="${{ inputs.header_image }}"
                HEADER_TITLE="üìå Pull Request Created"
                MESSAGE+="üîó <b>Repository:</b> ${{ github.repository }}<br/>"
                MESSAGE+="üìÑ <b>Title:</b> ${{ github.event.pull_request.title }}<br/>"
              fi
              ;;
            reopened)
              HEADER_TITLE="üîì Pull Request Reopened"
              ;;
            ready_for_review)
              HEADER_IMAGE="${{ inputs.header_image }}"
              HEADER_TITLE="üöÄ Pull Request Ready for Review"
              MESSAGE+="üîó <b>Repository:</b> ${{ github.repository }}<br/>"
              MESSAGE+="üìÑ <b>Title:</b> ${{ github.event.pull_request.title }}<br/>"
              ;;
            converted_to_draft)
              HEADER_TITLE="üìù Pull Request Converted to Draft"
              ;;
            *)
              HEADER_TITLE="üìå Pull Request Event"
              ;;
          esac
          
          MESSAGE+="üë§ <b>Author:</b> @${{ github.actor }}"
          
          echo "REPLY_OPTION=$REPLY_OPTION" >> $GITHUB_ENV
          echo "HEADER_TITLE=$HEADER_TITLE" >> $GITHUB_ENV
          echo "HEADER_IMAGE=$HEADER_IMAGE" >> $GITHUB_ENV
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV

      - name: Send PR Notification to Google Chat
        id: send_notification
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
                "cardsV2": [{
                  "cardId": "pr-notification",
                  "card": {
                    "header": {
                      "title": "'"$HEADER_TITLE"'",
                      "imageUrl": "'"$HEADER_IMAGE"'"
                    },
                    "sections": [{
                      "widgets": [{
                        "textParagraph": {
                          "text": "'"$MESSAGE"'"
                        }
                      }]
                    },
                    {
                      "widgets": [{
                        "buttonList": {
                          "buttons": [{
                            "text": "üîç View Pull Request",
                            "onClick": {
                              "openLink": {
                                "url": "'"${{ github.event.pull_request.html_url }}"'"
                              }
                            }
                          }]
                        }
                      }]
                    }]
                  }
                }],
                "thread": {
                  "threadKey": "'"${{ github.repository }}/${{ github.event.pull_request.number }}"'"
                }
              }' \
          "${{ secrets.notify_pr_webhook }}&messageReplyOption=$REPLY_OPTION"

  notify-pr-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review'
    steps:
      - name: Prepare message
        id: prepare_message
        run: |
          if [ "${{ inputs.reply_option }}" == "new_thread" ]; then
            REPLY_OPTION="MESSAGE_REPLY_OPTION_UNSPECIFIED"
          else
            REPLY_OPTION="REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD"
          fi

          case "${{ github.event.review.state }}" in
            approved)
              HEADER_TITLE="‚úÖ @${{ github.actor }} approved"
              BUTTON_TEXT="üîç View Approval"
              ;;
            commented)
              HEADER_TITLE="üí¨ @${{ github.actor }} left a comment"
              BUTTON_TEXT="üîç View Comment"
              ;;
            changes_requested)
              HEADER_TITLE="‚ùå @${{ github.actor }} requested changes"
              BUTTON_TEXT="üîç View Requested Changes"
              ;;
            *)
              HEADER_TITLE="üìå @${{ github.actor }} reviewed"
              BUTTON_TEXT="üîç View Event"
              ;;
          esac
                    
          echo "REPLY_OPTION=$REPLY_OPTION" >> $GITHUB_ENV
          echo "HEADER_TITLE=$HEADER_TITLE" >> $GITHUB_ENV
          echo "BUTTON_TEXT=$BUTTON_TEXT" >> $GITHUB_ENV
          echo "BUTTON_URL=${{ github.event.review.html_url }}" >> $GITHUB_ENV

      - name: Send Notification to Google Chat
        id: send_notification
        run: |
          ESCAPED_BODY=$(echo "${{ github.event.review.body }}" | jq -Rs '.')
          JSON_PAYLOAD='{
            "cardsV2": [{
              "cardId": "pr-notification",
              "card": {
                "header": {
                  "subtitle": "'"$HEADER_TITLE"'"
                },
                "sections": [{
                  "widgets": [{
                    "buttonList": {
                      "buttons": [{
                        "text": "'"$BUTTON_TEXT"'",
                        "onClick": {
                          "openLink": {
                            "url": "'"$BUTTON_URL"'"
                          }
                        }
                      }]
                    }
                  }'

          if [ -n "${{ github.event.review.body }}" ]; then
            JSON_PAYLOAD+=',{
              "textParagraph": {
                  "text": '"$ESCAPED_BODY"',
                  "maxLines": 5
                }
              }'
          fi
            
          JSON_PAYLOAD+=']'

          if [ -n "${{ github.event.review.body }}" ]; then
            JSON_PAYLOAD+=',
              "collapsible": true,
              "collapseControl": {
                "horizontalAlignment": "CENTER",
                "collapseButton": {
                  "icon": {
                    "materialIcon": {
                      "name": "visibility_off"
                    }
                  },
                  "text": "Hide comment",
                  "type": "BORDERLESS"
                },
                "expandButton": {
                  "icon": {
                    "materialIcon": {
                      "name": "visibility"
                    }
                  },
                  "text": "Preview comment",
                  "type": "BORDERLESS"
                }
              },
              "uncollapsibleWidgetsCount": 1'
          fi

          JSON_PAYLOAD+='}]}}],
            "thread": {
              "threadKey": "'"${{ github.repository }}/${{ github.event.pull_request.number }}"'"
            }
          }'

          echo "$JSON_PAYLOAD" | curl -X POST -H "Content-Type: application/json" -d @- \
          "${{ secrets.notify_pr_webhook }}&messageReplyOption=$REPLY_OPTION"
